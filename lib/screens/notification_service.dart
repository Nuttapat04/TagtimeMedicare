import 'dart:convert';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:tagtime_medicare/main.dart';
import 'package:tagtime_medicare/screens/medicine_detail_page.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:timezone/data/latest_all.dart' as tz;
import 'package:flutter/scheduler.dart';
import 'dart:async';

class NotificationService {
  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;
  NotificationService._internal();
  bool _isCheckingSkippedMedications = false; // ‡πÄ‡∏û‡∏¥‡πà‡∏° Flag
  Timer? _debounceTimer;

  static NotificationService get instance => _instance;

  final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
      FlutterLocalNotificationsPlugin();

  Future<void> initialize() async {
    tz.initializeTimeZones();

    const DarwinInitializationSettings iOSSettings =
        DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
    );

    const InitializationSettings initializationSettings =
        InitializationSettings(iOS: iOSSettings);

    await flutterLocalNotificationsPlugin.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: (response) async {
        print('üîî Notification clicked!');
        _handleNotificationClick(response.payload);
      },
    );

    FirebaseMessaging.instance.getInitialMessage().then((message) {
      if (message != null) {
        print('üì© App opened from terminated state via notification!');
        _handleNotificationClick(jsonEncode(message.data));
      }
    });

    FirebaseMessaging.onMessageOpenedApp.listen((message) {
      print('üì© Notification clicked while app was open!');
      _handleNotificationClick(jsonEncode(message.data));
    });

    FirebaseMessaging.onMessage.listen((message) {
      print('üîî Notification received while app is in foreground');
      _showLocalNotification(message);
    });

    print('‚úÖ NotificationService initialized');
  }

  void _handleNotificationClick(String? payload) async {
    print('üîî Notification clicked with payload: $payload');

    if (payload == null) {
      print('‚ùå No payload in notification');
      _showSnackBar('Error: No medication data found');
      return;
    }

    try {
      final payloadData = json.decode(payload);
      print('üì¶ Decoded payload: $payloadData');

      if (payloadData == null) {
        print('‚ùå Invalid payload format');
        _showSnackBar('Error: Invalid notification data');
        return;
      }

      final String? rfidUID = payloadData['rfidUID'];
      final String? userId = payloadData['user_id'];

      if (rfidUID == null || userId == null) {
        print('‚ùå Missing required data in payload');
        _showSnackBar('Error: Missing medication details');
        return;
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤
      final medsSnapshot = await FirebaseFirestore.instance
          .collection('Medications')
          .where('RFID_tag', isEqualTo: rfidUID)
          .where('user_id', isEqualTo: userId)
          .get();

      print('üìÑ Found ${medsSnapshot.docs.length} medications');

      if (medsSnapshot.docs.isEmpty) {
        print('‚ùå No medication found');
        _showSnackBar('Error: Medication not found');
        return;
      }

      final medicineData = medsSnapshot.docs.first.data();
      print('‚úÖ Navigating to medicine detail with data: $medicineData');

      navigatorKey.currentState?.push(
        MaterialPageRoute(
          builder: (context) => MedicineDetailPage(
            medicineData: medicineData,
            rfidUID: rfidUID,
          ),
        ),
      );
    } catch (e) {
      print('‚ùå Error handling notification: $e');
      _showSnackBar('Error: Could not load medication details');
    }
  }

  void _showLocalNotification(RemoteMessage message) async {
    RemoteNotification? notification = message.notification;
    if (notification != null) {
      flutterLocalNotificationsPlugin.show(
        notification.hashCode,
        notification.title,
        notification.body,
        const NotificationDetails(
          iOS: DarwinNotificationDetails(
            presentAlert: true,
            presentBadge: true,
            presentSound: true,
          ),
        ),
        payload: jsonEncode(message.data),
      );
    }
  }

  Future<void> scheduleNotification({
    required int id,
    required String title,
    required String body,
    required DateTime scheduledDate,
    required String rfidUID,
    required String userId,
  }) async {
    try {
      print('üîî Scheduling notification for RFID: $rfidUID');

      final tz.Location localTZ = tz.getLocation('Asia/Bangkok');
      final tz.TZDateTime scheduledTime =
          tz.TZDateTime.from(scheduledDate, localTZ);

      final payload = json.encode({
        'rfidUID': rfidUID,
        'user_id': userId,
      });

      await flutterLocalNotificationsPlugin.zonedSchedule(
        id,
        title,
        body,
        scheduledTime,
        NotificationDetails(
          iOS: const DarwinNotificationDetails(
            presentAlert: true,
            presentBadge: true,
            presentSound: true,
            interruptionLevel: InterruptionLevel.active,
            categoryIdentifier: 'medicine_reminder',
          ),
        ),
        androidAllowWhileIdle: true,
        uiLocalNotificationDateInterpretation:
            UILocalNotificationDateInterpretation.absoluteTime,
        matchDateTimeComponents: DateTimeComponents.time,
        payload: payload,
      );
    } catch (e) {
      print('‚ùå Error scheduling notification: $e');
    }
  }

Future<void> checkAndRecordSkippedMedications(String userId) async {
  if (_isCheckingSkippedMedications) {
    print('‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥');
    return;
  }

  _isCheckingSkippedMedications = true;
  print('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≤‡∏ô');

  try {
    final now = DateTime.now();
    final formattedDate =
        "${now.year}-${now.month.toString().padLeft(2, '0')}-${now.day.toString().padLeft(2, '0')}";

    final snapshot = await FirebaseFirestore.instance
        .collection('Medications')
        .where('user_id', isEqualTo: userId)
        .get();

    for (var doc in snapshot.docs) {
      final data = doc.data();
      final medicationId = doc.id;
      final rfidTag = data['RFID_tag'];
      final newNotificationTimes = List<String>.from(data['Notification_times'] ?? []);
      final lastSkipCheck = (data['Last_skip_check'] as Timestamp?)?.toDate() ?? DateTime(2000);

      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Skip ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
      final historySnapshot = await FirebaseFirestore.instance
          .collection('Medication_history')
          .where('User_id', isEqualTo: userId)
          .where('Medication_id', isEqualTo: medicationId)
          .where('Date', isEqualTo: formattedDate)
          .where('Status', isEqualTo: 'Skip')
          .get();

      List<String> existingSkippedTimes = historySnapshot.docs.map((doc) => doc['Scheduled_time'] as String).toList();

      // ‚úÖ ‡∏´‡∏≤‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô `Medication_history` ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô `newNotificationTimes`
      final timesToRemove = existingSkippedTimes.where((time) => !newNotificationTimes.contains(time)).toList();

      // üóë ‡∏•‡∏ö Skip ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô Notification_times ‡πÉ‡∏´‡∏°‡πà
      if (timesToRemove.isNotEmpty) {
        print('üóë ‡∏•‡∏ö Skip ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: $timesToRemove');

        for (String time in timesToRemove) {
          final oldSkipRecords = await FirebaseFirestore.instance
              .collection('Medication_history')
              .where('User_id', isEqualTo: userId)
              .where('Medication_id', isEqualTo: medicationId)
              .where('Scheduled_time', isEqualTo: time)
              .where('Date', isEqualTo: formattedDate)
              .where('Status', isEqualTo: 'Skip')
              .get();

          for (var record in oldSkipRecords.docs) {
            await FirebaseFirestore.instance.collection('Medication_history').doc(record.id).delete();
            print('üóë ‡∏•‡∏ö Skip ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ $time ‡πÅ‡∏•‡πâ‡∏ß');
          }
        }
      }

      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Skip ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
      for (String time in newNotificationTimes) {
        final timeParts = time.split(':');
        final scheduledDateTime = DateTime(
          now.year,
          now.month,
          now.day,
          int.parse(timeParts[0]),
          int.parse(timeParts[1]),
        );

        final difference = now.difference(scheduledDateTime);

        if (difference.inMinutes <= 300) {  
          print('‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Skip ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö $time');
          continue;
        }

        // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Skip ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        if (existingSkippedTimes.contains(time)) {
          print('‚úÖ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Skip ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö $time, ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ã‡πâ‡∏≥');
          continue;
        }

        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Skip ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà
        print('‚ö†Ô∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Skip ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà $time');
        await FirebaseFirestore.instance.collection('Medication_history').add({
          'User_id': userId,
          'RFID_tag': rfidTag,
          'Medication_id': medicationId,
          'Scheduled_time': time,
          'Date': formattedDate,
          'Status': 'Skip',
          'AutoSave': true,
          'mark': false,
          'Intake_time': FieldValue.serverTimestamp(),
        });

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Last_skip_check ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Skip ‡πÉ‡∏´‡∏°‡πà
        await FirebaseFirestore.instance.collection('Medications').doc(medicationId).update({
          'Last_skip_check': FieldValue.serverTimestamp(),
        });
      }
    }
  } catch (e) {
    print('‚ùå Error checking skipped medications: $e');
  } finally {
    _isCheckingSkippedMedications = false;
  }
}


void listenToMedicationChanges(String userId) {
  print('üîç Listening for medication changes for User ID: $userId');

  FirebaseFirestore.instance
      .collection('Medications')
      .where('user_id', isEqualTo: userId)
      .snapshots()
      .listen((snapshot) async {
    if (snapshot.docChanges.isEmpty) {
      print('üîÑ No actual changes detected, skipping...');
      return;
    }

    bool shouldCheckSkip = false;

    for (var change in snapshot.docChanges) {
      final docData = change.doc.data() as Map<String, dynamic>?;

      if (docData == null) continue;

      // ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Notification_times ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤
      if (change.type == DocumentChangeType.modified) {
        final newTimes = List<String>.from(docData['Notification_times'] ?? []);
        final lastUpdated = (docData['Updated_at'] as Timestamp?)?.toDate();

        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Å Skip
        if (lastUpdated != null &&
            DateTime.now().difference(lastUpdated).inMinutes < 2) {
          print('üõë ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≤ (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ß‡∏•‡∏≤) ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Å Skip');
          return;
        }
      }

      shouldCheckSkip = true;
    }

    if (shouldCheckSkip) {
      await checkAndRecordSkippedMedications(userId);
      await cancelAllNotifications();
      print('üßπ Cancelled all previous notifications');

      for (var doc in snapshot.docs) {
        final data = doc.data();
        final medicationName = data['M_name'] ?? 'Unknown';
        final notificationTimes =
            List<String>.from(data['Notification_times'] ?? []);
        final startDate = (data['Start_date'] as Timestamp).toDate();
        final endDate = (data['End_date'] as Timestamp).toDate();
        final now = DateTime.now();
        final rfidUID = data['RFID_tag'] ?? 'N/A';

        if (now.isBefore(startDate) || now.isAfter(endDate)) {
          print('‚è≠Ô∏è Skipping $medicationName: Outside valid date range');
          continue;
        }

        for (String time in notificationTimes) {
          try {
            final timeParts = time.split(':');
            final hour = int.tryParse(timeParts[0]);
            final minute = int.tryParse(timeParts[1]);

            if (hour == null || minute == null) {
              print('‚ö†Ô∏è Invalid time format: $time');
              continue;
            }

            final DateTime scheduledDate =
                DateTime(now.year, now.month, now.day, hour, minute);

            final adjustedDate = scheduledDate.isBefore(now)
                ? scheduledDate.add(const Duration(days: 1))
                : scheduledDate;

            await scheduleNotification(
              id: (medicationName + time).hashCode.abs() % 100000,
              title: 'üíä Medication Reminder',
              body: 'Time to take $medicationName',
              scheduledDate: adjustedDate,
              rfidUID: rfidUID,
              userId: userId,
            );
          } catch (e) {
            print('‚ùå Error scheduling notification for $medicationName: $e');
          }
        }
      }
    }
  }, onError: (error) {
    print('‚ùå CRITICAL ERROR in medication changes listener');
    print('Error: $error');
  });
}

Future<void> removeOldSkips(String userId, String medicationId, List<String> oldTimes, List<String> newTimes) async {
  final now = DateTime.now();
  final formattedDate =
      "${now.year}-${now.month.toString().padLeft(2, '0')}-${now.day.toString().padLeft(2, '0')}";

  // ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà
  final timesToRemove = oldTimes.where((time) => !newTimes.contains(time)).toList();

  if (timesToRemove.isEmpty) return; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£

  print('üóë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö Skip ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: $timesToRemove');

  for (String time in timesToRemove) {
    final existingRecords = await FirebaseFirestore.instance
        .collection('Medication_history')
        .where('User_id', isEqualTo: userId)
        .where('Medication_id', isEqualTo: medicationId)
        .where('Scheduled_time', isEqualTo: time)
        .where('Date', isEqualTo: formattedDate)
        .where('Status', isEqualTo: 'Skip')
        .get();

    for (var doc in existingRecords.docs) {
      await FirebaseFirestore.instance.collection('Medication_history').doc(doc.id).delete();
      print('üóë ‡∏•‡∏ö Skip ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö $time ‡πÅ‡∏•‡πâ‡∏ß');
    }
  }
}


  Future<void> cancelAllNotifications() async {
    try {
      await flutterLocalNotificationsPlugin.cancelAll();
    } catch (e) {
      print('‚ùå Error cancelling all notifications: $e');
    }
  }

  void _showSnackBar(String message) {
    final context = navigatorKey.currentContext;
    if (context != null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: Colors.red,
        ),
      );
    }
  }
}