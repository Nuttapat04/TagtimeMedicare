import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:tagtime_medicare/screens/notification_service.dart';

class MedicationService {
  final FirebaseFirestore firestore = FirebaseFirestore.instance;

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å Firebase
  Future<void> fetchAndScheduleNotifications(String userId) async {
    print('üì° Fetching medications for userId: $userId...');
    final QuerySnapshot medsSnapshot = await firestore
        .collection('Medications')
        .where('user_id', isEqualTo: userId)
        .get();

    for (var doc in medsSnapshot.docs) {
      final data = doc.data() as Map<String, dynamic>;
      final medicationName = data['M_name'] ?? 'Unknown';
      final notificationTimes = List<String>.from(data['Notification_times'] ?? []);
      final startDate = (data['Start_date'] as Timestamp).toDate();
      final endDate = (data['End_date'] as Timestamp).toDate();
      final now = DateTime.now();

      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô-‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
      print('üìÖ Start Date: $startDate');
      print('üìÖ End Date: $endDate');
      print('‚è≥ Now: $now');

      if (now.isBefore(startDate) || now.isAfter(endDate)) {
        print('‚è≠Ô∏è Skipping $medicationName: Out of date range.');
        continue;
      }

      // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ï‡∏≤‡∏° Notification Times
      for (String time in notificationTimes) {
        final hour = int.parse(time.split(':')[0]);
        final minute = int.parse(time.split(':')[1]);

        final DateTime scheduledDate = DateTime(
          now.year,
          now.month,
          now.day,
          hour,
          minute,
        );

        final adjustedDate = scheduledDate.isBefore(now)
            ? scheduledDate.add(const Duration(days: 1))
            : scheduledDate;

        print('üìÖ Scheduling notification for: üíä Medication Reminder at $adjustedDate (Local TZ)');

        try {
          await NotificationService().scheduleNotification(
            id: DateTime.now().millisecondsSinceEpoch.remainder(100000),
            title: 'üíä Medication Reminder',
            body: 'Time to take $medicationName.',
            scheduledDate: adjustedDate,
            payload: medicationName,
          );
          print('‚úÖ Notification scheduled for $medicationName at $adjustedDate');
        } catch (e) {
          print('‚ùå Error scheduling notification for $medicationName: $e');
        }
      }
    }
    print('‚úÖ All notifications have been scheduled.');
  }

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á Firebase ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Notification
  void listenToMedicationChanges(String userId) {
  print("üëÄ Listening for medication changes for userId: $userId...");
  
  firestore
      .collection('Medications')
      .where('user_id', isEqualTo: userId)
      .snapshots()
      .listen((QuerySnapshot snapshot) async {
    print("üîÑ Medication data changed in Firestore! Updating notifications...");

    // Debug Log: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    for (var doc in snapshot.docs) {
      print("üìå Updated Medication: ${doc.id}");
      print("   üè∑Ô∏è Name: ${doc['M_name']}");
      print("   ‚è∞ Notification Times: ${doc['Notification_times']}");
      print("   üìÜ Start Date: ${(doc['Start_date'] as Timestamp).toDate()}");
      print("   üìÜ End Date: ${(doc['End_date'] as Timestamp).toDate()}");
    }

    await NotificationService().cancelAllNotifications(); // ‡∏•‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    await fetchAndScheduleNotifications(userId); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà
    print("‚úÖ Notifications updated successfully!");
  });
}

}
