import 'dart:convert';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:tagtime_medicare/main.dart';
import 'package:tagtime_medicare/screens/medicine_detail_page.dart';
import 'package:tagtime_medicare/screens/notification_service.dart';

class MedicationService {
  final FirebaseFirestore firestore = FirebaseFirestore.instance;

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å Firebase
  Future<void> fetchAndScheduleNotifications(String userId) async {
    print('üì° Fetching medications for userId: $userId...');
    final QuerySnapshot medsSnapshot = await firestore
        .collection('Medications')
        .where('user_id', isEqualTo: userId)
        .get();

    for (var doc in medsSnapshot.docs) {
      final data = doc.data() as Map<String, dynamic>;
      final medicationName = data['M_name'] ?? 'Unknown';
      final notificationTimes = List<String>.from(data['Notification_times'] ?? []);
      final startDate = (data['Start_date'] as Timestamp).toDate();
      final endDate = (data['End_date'] as Timestamp).toDate();
      final now = DateTime.now();

      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô-‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
      print('üìÖ Start Date: $startDate');
      print('üìÖ End Date: $endDate');
      print('‚è≥ Now: $now');

      if (now.isBefore(startDate) || now.isAfter(endDate)) {
        print('‚è≠Ô∏è Skipping $medicationName: Out of date range.');
        continue;
      }

      // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ï‡∏≤‡∏° Notification Times
      for (String time in notificationTimes) {
        final hour = int.parse(time.split(':')[0]);
        final minute = int.parse(time.split(':')[1]);

        final DateTime scheduledDate = DateTime(
          now.year,
          now.month,
          now.day,
          hour,
          minute,
        );

        final adjustedDate = scheduledDate.isBefore(now)
            ? scheduledDate.add(const Duration(days: 1))
            : scheduledDate;

        print('üìÖ Scheduling notification for: üíä Medication Reminder at $adjustedDate (Local TZ)');

        try {
          await NotificationService().scheduleNotification(
  id: DateTime.now().millisecondsSinceEpoch.remainder(100000),
  title: 'üíä Medication Reminder',
  body: 'Time to take $medicationName',
  scheduledDate: adjustedDate,
  payload: json.encode({
    'M_name': medicationName,
    'RFID_tag': data['RFID_tag'] ?? 'N/A',  // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å data ‡πÅ‡∏ó‡∏ô rfidUID
    'user_id': userId,
  }),
);
          print('‚úÖ Notification scheduled for $medicationName at $adjustedDate');
        } catch (e) {
          print('‚ùå Error scheduling notification for $medicationName: $e');
        }
      }
    }
    print('‚úÖ All notifications have been scheduled.');
  }

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á Firebase ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Notification
  void listenToMedicationChanges(String userId) {
  print("üëÄ Listening for medication changes for userId: $userId...");

  FirebaseFirestore.instance
      .collection('Medications')
      .where('user_id', isEqualTo: userId)
      .snapshots()
      .listen((snapshot) async {
    final now = DateTime.now();

    for (var doc in snapshot.docs) {
      final data = doc.data();
      final medicationName = data['M_name'] ?? 'Unknown';
      final notificationTimes = List<String>.from(data['Notification_times'] ?? []);
      final startDate = (data['Start_date'] as Timestamp).toDate();
      final endDate = (data['End_date'] as Timestamp).toDate();
      final rfidUID = data['rfidUID'] ?? 'N/A';

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
      if (now.isBefore(startDate) || now.isAfter(endDate)) {
        continue;
      }

      // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡∏±‡∏ö notificationTimes
      for (String time in notificationTimes) {
        final hour = int.parse(time.split(':')[0]);
        final minute = int.parse(time.split(':')[1]);

        final DateTime scheduledTime = DateTime(
          now.year,
          now.month,
          now.day,
          hour,
          minute,
        );

        // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏¢‡∏≤‡πÅ‡∏•‡πâ‡∏ß (¬±1 ‡∏ô‡∏≤‡∏ó‡∏µ)
        if (scheduledTime.isAfter(now.subtract(const Duration(minutes: 1))) &&
            scheduledTime.isBefore(now.add(const Duration(minutes: 1)))) {
          print("üîî Time to take $medicationName!");

          // ‚úÖ Navigate to MedicineDetailPage
          Navigator.push(
            navigatorKey.currentState!.context,
            MaterialPageRoute(
              builder: (context) => MedicineDetailPage(
                medicineData: data,
                rfidUID: rfidUID,
              ),
            ),
          );

          break;
        }
      }
    }
  });
}

}
